<?php//===============================================================class PluginReceptiondesk_ModuleQuestion extends Module{//===============================================================	protected $oMapper;//===============================================================	public function Init(){		$this->oMapper=Engine::GetMapper(__CLASS__);	}//===============================================================	public function AddQuestion(PluginReceptiondesk_ModuleQuestion_EntityQuestion $oQuestion){		if($sQuestionId=$this->oMapper->AddQuestion($oQuestion)){			$oQuestion->setId($sQuestionId);			$this->Cache_Clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG,array('receptiondesk_question_new'));			return $oQuestion;		}		return false;	}//===============================================================	public function UpdateQuestion(PluginReceptiondesk_ModuleQuestion_EntityQuestion $oQuestion){		if($this->oMapper->UpdateQuestion($oQuestion)){			$this->Cache_Clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG,array('receptiondesk_question_update','receptiondesk_question_update_{$oQuestion->getId()}'));			$this->Cache_Delete('receptiondesk_question_{$oQuestion->getId()}');			return true;		}		return false;	}//===============================================================	public function DeleteQuestion($sQuestionId){		if($this->oMapper->DeleteQuestion($sQuestionId)){			$this->Cache_Clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG,array('receptiondesk_question_update'));			$this->Cache_Delete("receptiondesk_question_{$sQuestionId}");			return true;		}		return false;	}//===============================================================	public function GetQuestionAdditionalData($aQuestionId,$aAllowData=null,$aOrder=null){		if(is_null($aAllowData)) $aAllowData=array('owner'=>array());		func_array_simpleflip($aAllowData);		if(!is_array($aQuestionId)) $aQuestionId=array($aQuestionId);		$aQuestion=$this->GetQuestionByArrayId($aQuestionId,$aOrder);		$aCategoryId=array();		foreach($aQuestion as $oQuestion) $aCategoryId[]=$oQuestion->getCategoryId();		$aCategories=$this->PluginReceptiondesk_Category_GetCategoryAdditionalData($aCategoryId);		foreach($aQuestion as $oQuestion){			if(isset($aCategories[$oQuestion->getCategoryId()])){				$oQuestion->setCategory($aCategories[$oQuestion->getCategoryId()]);			}else{				$oQuestion->setCategory(null);			}		}		return $aQuestion;	}//===============================================================	public function GetQuestionByArrayId($aQuestionId,$aOrder=null){		if(!$aQuestionId) return array();		if(Config::Get('sys.cache.solid')) return $this->GetQuestionByArrayIdSolid($aQuestionId,$aOrder);		if(!is_array($aQuestionId)) $aQuestionId=array($aQuestionId);		$aQuestionId=array_unique($aQuestionId);		$aQuestion=$aQuestionIdNotNeedQuery=array();		$aCacheKeys=func_build_cache_keys($aQuestionId,'receptiondesk_question_');		if(false!==($data=$this->Cache_Get($aCacheKeys))){			foreach($aCacheKeys as $sValue=>$sKey){				if(array_key_exists($sKey,$data)){					if($data[$sKey]){						$aQuestion[$data[$sKey]->getId()]=$data[$sKey];					}else{						$aQuestionIdNotNeedQuery[]=$sValue;					}				}			}		}		$aQuestionIdNeedQuery=array_diff($aQuestionId,array_keys($aQuestion));		$aQuestionIdNeedQuery=array_diff($aQuestionIdNeedQuery,$aQuestionIdNotNeedQuery);		$aQuestionIdNeedStore=$aQuestionIdNeedQuery;		if($data=$this->oMapper->GetQuestionByArrayId($aQuestionIdNeedQuery)){			foreach($data as $oQuestion){				$aQuestion[$oQuestion->getId()]=$oQuestion;				$this->Cache_Set($oQuestion,"receptiondesk_question_{$oQuestion->getId()}",array(),60*60*24*4);				$aQuestionIdNeedStore=array_diff($aQuestionIdNeedStore,array($oQuestion->getId()));			}		}		foreach($aQuestionIdNeedStore as $sId) $this->Cache_Set(null,"receptiondesk_question_{$sId}",array(),60*60*24*4);		$aQuestion=func_array_sort_by_keys($aQuestion,$aQuestionId);		return $aQuestion;	}//===============================================================	public function GetQuestionByArrayIdSolid($aQuestionId,$aOrder=null){		if(!is_array($aQuestionId)) $aQuestionId=array($aQuestionId);		$aQuestionId=array_unique($aQuestionId);		$aQuestion=array();		$s=join(',',$aQuestionId);		if(false===($data=$this->Cache_Get("receptiondesk_question_id_{$s}"))){			$data=$this->oMapper->GetQuestionByArrayId($aQuestionId,$aOrder);			foreach ($data as $oQuestion) $aQuestion[$oQuestion->getId()]=$oQuestion;			$this->Cache_Set($aQuestion,"receptiondesk_question_id_{$s}",array("receptiondesk_question_update"),60*60*24*1);			return $aQuestion;		}		return $data;	}//===============================================================	public function GetQuestionById($sQuestionId){		if(!is_numeric($sQuestionId)) return null;		$aQuestion=$this->GetQuestionAdditionalData($sQuestionId);		if(isset($aQuestion[$sQuestionId])) return $aQuestion[$sQuestionId];		return null;	}//===============================================================	public function GetQuestionUnique($sHash,$sUserIp){		return $this->oMapper->GetQuestionUnique($sHash,$sUserIp);	}//===============================================================	public function GetQuestionByFilter($aFilter,$iPage=1,$iPerPage=10,$aAllowData=null){		if(!is_numeric($iPage) || $iPage<=0) $iPage=1;		$s=serialize($aFilter);		if(false===($data=$this->Cache_Get("receptiondesk_question_filter_{$s}_{$iPage}_{$iPerPage}"))){			$data=array('collection'=>$this->oMapper->GetQuestionByFilter($aFilter,$iCount,$iPage,$iPerPage),'count'=>$iCount);			$this->Cache_Set($data,"receptiondesk_question_filter_{$s}_{$iPage}_{$iPerPage}",array('receptiondesk_question_update','receptiondesk_question_new'),60*60*24*3);		}		$data['collection']=$this->GetQuestionAdditionalData($data['collection'],$aAllowData);		return $data;	}//===============================================================	public function GetCountQuestionByFilter($aFilter){		$s=serialize($aFilter);		if(false===($data=$this->Cache_Get("receptiondesk_question_count_filter_{$s}"))){			$data=$this->oMapper->GetCountQuestionByFilter($aFilter);			$this->Cache_Set($data,"receptiondesk_question_count_filter_{$s}",array('receptiondesk_question_update','receptiondesk_question_new'),60*60*24*1);		}		return 	$data;	}//===============================================================	public function GetQuestionList($iPage,$iPerPage,$iPublish=null,$iCategory=null){		$aFilter=array();		if(!is_null($iPublish) && in_array((int)$iPublish,array(0,1))) $aFilter['question_publish']=$iPublish;		if(!is_null($iPublish)) $aFilter['question_category_id']=$iCategory;		return $this->GetQuestionByFilter($aFilter,$iPage,$iPerPage);	}//===============================================================	public function GetCountQuestionList($iPublish=null,$iCategory=null){		$aFilter=array();		if(!is_null($iPublish) && in_array((int)$iPublish,array(0,1))) $aFilter['question_publish']=$iPublish;		if(!is_null($iPublish)) $aFilter['question_category_id']=$iCategory;		return $this->GetCountQuestionByFilter($aFilter);	}//===============================================================	public function GetNewQuestionList($iPage,$iPerPage,$iPublish=null,$iCategory=null){		$sDate=date("Y-m-d H:00:00",time()-Config::Get('plugin.receptiondesk.receptiondesk_question_new_time'));		$aFilter=array('question_new'=>$sDate,);		if(!is_null($iPublish) && in_array((int)$iPublish,array(0,1))) $aFilter['question_publish']=$iPublish;		if(!is_null($iPublish)) $aFilter['question_category_id']=$iCategory;		return $this->GetQuestionByFilter($aFilter,$iPage,$iPerPage);	}//===============================================================	public function GetCountNewQuestionList($iPublish=null,$iCategory=null){		$sDate=date("Y-m-d H:00:00",time()-Config::Get('plugin.receptiondesk.receptiondesk_question_new_time'));		$aFilter=array('question_new'=>$sDate,);		if(!is_null($iPublish) && in_array((int)$iPublish,array(0,1))) $aFilter['question_publish']=$iPublish;		if(!is_null($iPublish)) $aFilter['question_category_id']=$iCategory;		return $this->GetCountQuestionByFilter($aFilter);	}//===============================================================	public function MoveQuestions($sCategoryId,$sRemoveCategoryId){		$this->Cache_Clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG,array('receptiondesk_question_update'));		return $this->oMapper->MoveQuestions($sCategoryId,$sRemoveCategoryId);	}//===============================================================}?>